{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItems.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItems","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","console","log","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAmB9C,OAEI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAAEP,GAExBF,EAAcE,EAAEQ,OAAOF,Y,uBCJlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAKFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCHPO,EAAe,SAAC,GAAwB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAItC,OACI,yBAAKc,UAAU,QACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCLF,SAASO,EAAT,GAAgC,IAAbnB,EAAY,EAAZA,SAAY,ECDlB,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHC,YAAY,WACRJ,EAAS,CACLf,KAAOkB,EACPL,SAAS,MAEf,UAEX,CAACpB,IAEGqB,EDlB2BM,CAAc3B,GAAlCa,EAF4B,EAElCN,KAAca,EAFoB,EAEpBA,QAKtB,OAHAQ,QAAQC,IAAIT,GAIR,oCACI,4BAAMpB,GAEJoB,GAAW,sCAEb,yBAAKJ,UAAU,aAEHH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIoB,IAAMpB,EAAIC,IACLD,SElB9B,IAAMqB,EAAe,WAAO,IAAD,EAEM7C,mBAAS,CAAC,cAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAW9B,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ+C,EAAWvB,KAAK,SAAAT,GAAQ,OAEpB,kBAACmB,EAAD,CACIW,IAAQ9B,EACRA,SAAYA,U,MCpBxCiC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.267fd7af.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // () error porque es undefined\r\n\r\n    const handleInputChange = ( e ) => {\r\n        //console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        //<>\r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n        //</>\r\n    )\r\n}\r\n\r\n//setCategories es requerido\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n//async: Tengo una promesa\r\n//await: espera que se resuelva la promesa para recien seguir\r\n//Try-catch:  manejo de error\r\nexport const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Pyp3BKaqBxcBfWaYrC43wSQLeVeZ1GHy`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json(); //Desestructuracion\r\n\r\n    //console.log(data);\r\n\r\n    //Hago un barrido en el array img\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //?: si viene la imagen se utiliza\r\n        }\r\n    })\r\n\r\n    //Devuelve una promesa\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItems = ({ id, title, url } ) => {\r\n\r\n    //console.log({ id, title, url });\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItems } from './GifGridItems';\r\n\r\nexport default function GifGrid({ category }) {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    console.log(loading);\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <h3>{ category }</h3>\r\n\r\n            { loading && <p>Loading</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map( img => (                        \r\n                            <GifGridItems \r\n                                key={ img.id }\r\n                                { ...img }\r\n                            />\r\n                        ))\r\n                    }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Se ejecuta solamente cuando la CATEGORIA cambia.\r\n    //Sin useEffect, getGifs() se ejecuta cada vez que se renderize el componente.\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then( imgs => {\r\n                setTimeout( () => {\r\n                    setState({\r\n                        data:  imgs,\r\n                        loading: false\r\n                    });\r\n                },3000 );\r\n            })\r\n    }, [category]) //Lista de dependencias\r\n\r\n    return state;\r\n    \r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch'] );\r\n\r\n    //const handleAdd = () => {\r\n        //Valor del estado anterior + lo que quiero agregar\r\n        //Set sobreescribe el valo anterior\r\n        //setCategories( [...categories, 'Hunter'] );\r\n        //setCategories( cats => [...cats, 'Hunter']);\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        //<li key={ category }>{ category }</li>\r\n                        <GifGrid\r\n                            key = { category }\r\n                            category= { category } />\r\n                    ))\r\n                    \r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}